Product Description Page Using react and microservices  and graphQL as BFF

This application is dockerized.

Go to project root folder and run command “docker-compose up —build”

Now your project runs on localhost:3000

Here you can see an example product description which contains the product description with the product variants and reviews/comments. Also metadata is added using helmet from react.

To test API authentication, project should be run locally.
To make all services run locally and in a single command add the below scripts object to pcckage.json(go to folder “pdp-react-app”  add the following script to package.json)
 "scripts": {
    "start-client": "react-scripts start",
    "build": "react-scripts build && (cd ../microservices && npm install )",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "start": "concurrently \"react-scripts start\"  \"cd ../microservices && npm run start:product\" \"cd ../microservices && npm run start:pdp\" \"cd ../microservices && npm run start:ugc\" \"cd ../microservices && npm run start:meta\""
  },

Run commands:

npm run build
npm run start

This runs all our services concurrently.
Product-service runs on  “http://localhost:5001/“
meta-service runs on  “http://localhost:5003/“
ugc-service runs on  “http://localhost:5002/“
GraphQL server runs on “http://localhost:5004/graghql“
react app runs on "http://localhost:3000"

Note: if you running application using docker then scripts object should be replaced with
"scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build,
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },


————————————————————————————————————————————————————————————————————————————————————————————
In this project 4 microservices are created using node js(express framework)

To test APIs, use this api key:-  headers :{ Authorization:"Bearer 123456789"}

————————————————————————————————————————————————————————————————————————————————————————————
Product service: It has an authentication using API key
API’s:

API to get the product
http://localhost:5001/product

API to get the product variant using product id and variant id
http://localhost:5001/product/:productid/:variantid/:title


————————————————————————————————————-------------------------------------------------------
User Generated Content service: It has an authentication using API key
Apis:

Api to get ugc using product id (ex productid=1)
http://localhost:5002/ugc/:productid


—————————————————————————————————————————————————————————————————————————————————————————————
User Metadata service: It has an authentication using API key
Apis:

Api to get all metadata of products 
http://localhost:5003/metadatas

Api to get metadata of specific product id(ex productid=1)
http://localhost:5003/metadata/:productid


———————————————————————————————————————————————————————————————————————————————————————————————
Pdp service: Acts as an api gateway(BFF). GraphQL is used.

Locally runs on 
http://localhost:5004/graphql

The Queries are
product: Product
	—>which gets product data with all variants

variant(id: Int variantid: Int title: String) : Variant
	—>to get product variant data

metadatas: [variant]
	—>to get all metadata

metadata(pid: Int): Metadata
	—>to get metadata of specific product by using productid

ugc(id: Int): UgcContent
	—>to get ugc of specific product by using productid

————————————————————————————————————————————————————————————————————————————————————————————————————

In Front end react is used with functional components approach and GraphQL with appollo server is used as BFF

—————————————————————————————————————————————————————————————————————————————————————————————————————

Improvements:
Front-end :We can improve design slightly. Kept it simple for now. 
Backend: Refactoring of code needed in some places like creating auth service separately.
Tests:Tests cases can be included in future.







 
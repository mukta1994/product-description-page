Product Description Page Using react and microservices  and graphQL as BFF

CICD proposal and PDP design are attached

The stack used in this project
1. Microservices using nodejs(expressjs framework)
2. GraphQL as BFF 
4. Authentication: API key by using passport js library
3. Reactjs for front end

This application is dockerized.

So in one command we can run our application
Go to project root folder and run command “docker-compose up —build”

1. Product-service runs on  “http://localhost:5001/“
2. meta-service runs on  “http://localhost:5003/“
3. ugc-service runs on  “http://localhost:5002/“
4. PDP(GraphQL) runs on “http://localhost:5004/graghql“
5. react app runs on "http://localhost:3000"

Now your project runs on localhost:3000

Here you can see an example product description which contains the product description with the product variants and reviews/comments. Also metadata is added using helmet from react.
Product attribute combinations work properly.

————————————————————————————————————————————————————————————————————————————————————————————
In this project 4 microservices are created using node js(express framework)

To test APIs, use this api key:-  headers :{ Authorization:"Bearer 123456789"}

————————————————————————————————————————————————————————————————————————————————————————————
Product service: It has an authentication using API key
API’s:

API to get the product
http://localhost:5001/product

API to get the product variant using product id and variant id(ex:http://localhost:5001/product/1/1/OZWEEGO SHOES Green)
http://localhost:5001/product/:productid/:variantid/:title


————————————————————————————————————-------------------------------------------------------
User Generated Content service: It has an authentication using API key
Apis:

Api to get ugc using product id (ex productid=1)
http://localhost:5002/ugc/:productid


—————————————————————————————————————————————————————————————————————————————————————————————
User Metadata service: It has an authentication using API key
Apis:

Api to get all metadata of products 
http://localhost:5003/metadatas

Api to get metadata of specific product id(ex productid=1)
http://localhost:5003/metadata/:productid


———————————————————————————————————————————————————————————————————————————————————————————————
Pdp service: Acts as an api gateway(BFF). GraphQL is used.

Locally runs on 
http://localhost:5004/graphql

The Queries are
product: Product
	—>which gets product data with all variants

variant(id: Int variantid: Int title: String) : Variant
	—>to get product variant data

metadatas: [variant]
	—>to get all metadata

metadata(pid: Int): Metadata
	—>to get metadata of specific product by using productid

ugc(id: Int): UgcContent
	—>to get ugc of specific product by using productid

————————————————————————————————————————————————————————————————————————————————————————————————————

In Front end react is used with functional components approach and GraphQL with appollo server is used as BFF
React app components contains 3 main components
1. Description component
2. Meta component --which uses helmet (react)
3. Ugc component
—————————————————————————————————————————————————————————————————————————————————————————————————————

Improvements:
Front-end :We can improve design slightly. Kept it simple for now. 
Backend: Refactoring of code needed in some places like error handling.
Tests:Tests cases can be included in future.







 